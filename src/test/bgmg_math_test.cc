#include "gtest/gtest.h"

#include "bgmg_math.h"

namespace {

void BgmgMath_binormal_cdf_test() {
  /*
  // matlab code to calculate expected values
  x=[-64.0, -16.0, -4.0, -1.0, 0.0, 1.0, 4.0, 16.0, 64.0];
  rho=[ -0.99, -0.9, 0.0, 0.9, 0.99];
  cdf=[]; for i=1:length(x), for j=1:length(x), for k=1:length(rho), cdf(end+1,1)=mvncdf([x(i),x(j)],[0, 0],[[1, rho(k)];[rho(k),1]]); end;end;end
  cdf(~isfinite(cdf))=0;
  for i=1:length(cdf), fprintf('%.6ef, ', cdf(i)); end
  */
  std::vector<float> v = { -64.0f, -16.0f, -4.0f, -1.0f, 0.0f, 1.0f, 4.0f, 16.0f, 64.0f};
  std::vector<float> rho = { -0.99f, -0.9f, 0.0f, 0.9f, 0.99f };
  std::vector<float> v_ext = { -1e36f, -1000.0f, -200.0f, -64.0f, -16.0f, -4.0f, -1.0f, 0.0f, 1.0f, 4.0f, 16.0f, 64.0f, 200.0f, 1000.0f, 1e36f };
  std::vector<float> rho_ext = { -0.99f, -0.9f, -0.4f, -0.2f, 0.0f, 0.2f, 0.4f, 0.9f, 0.99f };  // 0, 0.3, 0.75, 0.925 are important points for BVNcdf
  float NaNf = 0, PNaNf = 1;
  std::vector<float> expected = { NaNf, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, NaNf, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 9.465085e-117f, 4.081618e-115f, 1.463872e-61f, 1.628314e-58f, 0.000000e+00f, 0.000000e+00f, 2.023398e-62f, 6.388692e-58f, 6.388754e-58f, 0.000000e+00f, 0.000000e+00f, 1.013609e-58f, 6.388755e-58f, 6.388754e-58f, 0.000000e+00f, 3.793632e-65f, 3.194377e-58f, 6.388754e-58f, 6.388754e-58f, 0.000000e+00f, 0.000000e+00f, 5.375145e-58f, 6.388754e-58f, 6.388754e-58f, 0.000000e+00f, 6.233034e-63f, 6.388552e-58f, 6.388754e-58f, 6.388754e-58f, 4.760441e-58f, 6.387291e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 2.023398e-62f, 6.388692e-58f, 6.388754e-58f, 0.000000e+00f, 1.654361e-24f, 1.003068e-09f, 1.054426e-05f, 2.421430e-05f, 2.139862e-277f, 1.439956e-20f, 5.024809e-06f, 3.167124e-05f, 3.167124e-05f, 7.210629e-180f, 0.000000e+00f, 1.583562e-05f, 3.167124e-05f, 3.167124e-05f, 4.141089e-104f, 9.672229e-15f, 2.664643e-05f, 3.167124e-05f, 3.167124e-05f, 7.456946e-06f, 2.112698e-05f, 3.167024e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 1.013609e-58f, 6.388755e-58f, 6.388754e-58f, 2.139862e-277f, 1.439956e-20f, 5.024809e-06f, 3.167124e-05f, 3.167124e-05f, 4.135527e-48f, 1.452984e-07f, 2.517149e-02f, 1.154903e-01f, 1.450035e-01f, 5.224752e-15f, 7.048050e-04f, 7.932763e-02f, 1.579504e-01f, 1.586553e-01f, 1.365172e-02f, 4.316492e-02f, 1.334838e-01f, 1.586551e-01f, 1.586553e-01f, 1.586236e-01f, 1.586236e-01f, 1.586502e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 3.793632e-65f, 3.194377e-58f, 6.388754e-58f, 6.388754e-58f, 7.210629e-180f, 0.000000e+00f, 1.583562e-05f, 3.167124e-05f, 3.167124e-05f, 5.224752e-15f, 7.048050e-04f, 7.932763e-02f, 1.579504e-01f, 1.586553e-01f, 2.252671e-02f, 7.178315e-02f, 2.500000e-01f, 4.282169e-01f, 4.774733e-01f, 3.413447e-01f, 3.420496e-01f, 4.206724e-01f, 4.992952e-01f, 5.000000e-01f, 4.999683e-01f, 4.999683e-01f, 4.999842e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 5.375145e-58f, 6.388754e-58f, 6.388754e-58f, 4.141089e-104f, 9.672229e-15f, 2.664643e-05f, 3.167124e-05f, 3.167124e-05f, 1.365172e-02f, 4.316492e-02f, 1.334838e-01f, 1.586551e-01f, 1.586553e-01f, 3.413447e-01f, 3.420496e-01f, 4.206724e-01f, 4.992952e-01f, 5.000000e-01f, 6.826895e-01f, 6.826896e-01f, 7.078610e-01f, 7.981798e-01f, 8.276930e-01f, 8.413131e-01f, 8.413131e-01f, 8.413181e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 6.233034e-63f, 6.388552e-58f, 6.388754e-58f, 6.388754e-58f, 7.456946e-06f, 2.112698e-05f, 3.167024e-05f, 3.167124e-05f, 3.167124e-05f, 1.586236e-01f, 1.586236e-01f, 1.586502e-01f, 1.586553e-01f, 1.586553e-01f, 4.999683e-01f, 4.999683e-01f, 4.999842e-01f, 5.000000e-01f, 5.000000e-01f, 8.413131e-01f, 8.413131e-01f, 8.413181e-01f, 8.413447e-01f, 8.413447e-01f, 9.999367e-01f, 9.999367e-01f, 9.999367e-01f, 9.999472e-01f, 9.999609e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 4.760441e-58f, 6.387291e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, NaNf, 0.000000e+00f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 6.388754e-58f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 3.167124e-05f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 1.586553e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 5.000000e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 8.413447e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 9.999683e-01f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, PNaNf, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f, 1.000000e+00f };
  int i = 0;
  int failed = 0;
  for (int i1 = 0; i1 < v.size(); i1++) {
    for (int i2 = 0; i2 < v.size(); i2++) {
      for (int ir = 0; ir < rho.size(); ir++) {
        float b = binormal_cdf_stan(v[i1], v[i2], rho[ir]);
        double d = BVNcdf(v[i1], v[i2], rho[ir]);
        if ((fabs(b - expected[i]) > 1e-7) || (fabs(d - expected[i]) > 1e-7)) {
          if (failed == 0) printf("h=%.1f, k=%.1f, r=%.2f, stan=%.8e, BVNcdf=%.8e, matlab=%.8e\n", v[i1], v[i2], rho[ir], b, d, expected[i]);
          failed++;
        }
        i++;
      }
    }
  }
  printf("%i validations completed, %i failed comparison\n", i, failed);

  i = 0;
  failed = 0;
  for (int i1 = 0; i1 < v_ext.size(); i1++) {
    for (int i2 = 0; i2 < v_ext.size(); i2++) {
      for (int ir = 0; ir < rho_ext.size(); ir++) {
        float b = binormal_cdf_stan(v_ext[i1], v_ext[i2], rho_ext[ir]);
        double d = BVNcdf(v_ext[i1], v_ext[i2], rho_ext[ir]);
        if ((fabs(b-d) > 1e-7)) {
          if (failed == 0) printf("h=%.1f, k=%.1f, r=%.2f, stan=%.8e, BVNcdf=%.8e\n", v_ext[i1], v_ext[i2], rho_ext[ir], b, d);
          failed++;
        }
        i++;
      }
    }
  }
  printf("%i validations completed, %i failed comparison\n", i, failed);

  i = 0; failed = 0;
  for (int i1 = 0; i1 < v_ext.size(); i1++) {
    if (v_ext[i1] <= 0) continue;
    for (int i2 = 0; i2 < v_ext.size(); i2++) {
      if (v_ext[i2] <= 0) continue;
      for (int ir = 0; ir < rho_ext.size(); ir++) {
        float s1 = censored2_cdf_BVN<float>(v_ext[i1], v_ext[i2], 1, rho_ext[ir], 1);
        float s2 = censored2_cdf_stan<float>(v_ext[i1], v_ext[i2], 1, rho_ext[ir], 1);
        if (fabs(log(s1) - log(s2)) > 0.001) {
          if (failed == 0) printf("DELTA=%.3f : h=%.1f, k=%.1f, r=%.2f, log(censored2_cdf)=%.8e, log(censored2_cdf_stan)=%.8e\n", log(s1)-log(s2), v_ext[i1], v_ext[i2], rho_ext[ir], log(s1), log(s2));
          failed++;
        }
        i++;
      }
    }
  }
  printf("%i validations completed, %i failed comparison\n", i, failed);
}

// bgmg-test.exe --gtest_filter=BgmgMath.binormal_cdf
TEST(BgmgMath, binormal_cdf) {
  BgmgMath_binormal_cdf_test();
}

}
